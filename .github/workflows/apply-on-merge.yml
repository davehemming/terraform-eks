name: Plan / Apply On Merge

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  inform_about_apply:
    name: Inform About Apply
    runs-on: ubuntu-20.04

    steps:
      - name: Inform on PR that Apply is Running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily...

  plan_and_apply:
    name: Plan and Apply
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        path:
          - dev
    steps:
      - name: Check out code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.8
          cli_config_credentials_token: ${{ secrets.TF_API_KEY }}
          terraform_wrapper: true
      - name: Initialize Terraform
        id: init
        run: |
          terraform -chdir=terraform/${{ matrix.path }} init -input=false
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Run terraform fmt check
        id: fmt
        run: terraform fmt -check -diff -recursive ./terraform
      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          terraform -chdir=terraform/${{ matrix.path }} plan -input=false -no-color 
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
          sed -i -n -E -e '/Terraform will perform the following actions/,$ p' plan.txt
      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          terraform -chdir=terraform/${{ matrix.path }} apply -input=false -auto-approve -no-color
      - name: Post Plan and Apply to GitHub PR
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ## Applying ${{ matrix.path }} plan
            #### Terraform Format and Style üñå ${{ steps.fmt.outcome }}
            #### Terraform Initialization ‚öôÔ∏è ${{ steps.init.outcome }}
            #### Terraform Validation ü§ñ ${{ steps.validate.outcome }}
            #### Terraform Plan üìñ ${{ steps.plan.outcome }}
            <details><summary>Show Plan</summary>
              
            ```diff
            ${{ env.PLAN }}
            ```
              
            </details>
              
            <details><summary>Show output</summary>
              
            ```
            ${{ steps.apply.outputs.stdout }}
            ```
             
            </details>
              
      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Plan failed for **${{ matrix.path }}**:
            ```
            ${{ steps.plan.outputs.stderr }}
            ```
      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            Apply failed for **${{ matrix.path }}**:
            ```
            ${{ steps.apply.outputs.stderr }}
            ```
